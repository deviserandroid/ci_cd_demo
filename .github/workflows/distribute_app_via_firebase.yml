name: Build App and Distribute it via Firebase

on:
  pull_request:
    branches:
      - release/firebase

  push:
    branches:
      - release/firebase

jobs:

  #Job 3
  build-ios:
    runs-on: macos-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Basic Setup via Composite
        uses: ./.github/action_basic_setup

      - name: Set Up CocoaPods
        run: |
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer          
          cd ios 
            if [ -f "Podfile" ]; then echo "Podfile exists."; else pod init; fi
            pod deintegrate
            pod install
            pod update

      - name: Authenticate with Apple
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.P12_PASSWORD }}
          keychain-name: "ios-build.keychain"
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
          install-certs: true


          #      - name: Install the Apple certificate and provisioning profile
#        env:
#            BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#            P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#            BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#            KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#        run: |
#            # create variables
#            CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#            PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#            KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#
            # import certificate and provisioning profile from secrets
#            echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#            echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
            
            # create temporary keychain
#            security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#            security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            
            # import certificate to keychain
#            security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#           security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           security list-keychain -d user -s $KEYCHAIN_PATH
            
            # apply provisioning profile
#            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#            cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build iOS App
        run: xcodebuild -exportArchive -archivePath build/ios/archive/Runner.xcarchive -exportPath build/ios/ipa -exportOptionsPlist ios/ExportOptions.plist -allowProvisioningUpdates
        #run: flutter build ipa --release
        working-directory: ./

      - run: mkdir Payload
        working-directory: build/ios/archive/Runner.xcarchive/Products/Applications

      - run: mv Runner.app/ Payload
        working-directory: build/ios/archive/Runner.xcarchive/Products/Applications

      - run: ls -R build/ios/archive/Runner.xcarchive/Products/Applications/Payload

      - name: Zip output
        run: zip -qq -r -9 FlutterIpaExport.ipa Payload
        working-directory: build/ios/archive/Runner.xcarchive/Products/Applications

      - name: Validate IPA
        run: codesign -vvv --deep --strict FlutterIpaExport.ipa
        working-directory: build/ios/archive/Runner.xcarchive/Products/Applications

      - name: Upload ipa on Repository Environment
        uses: actions/upload-artifact@v4
        with:
          name: ci_cd_demo.ipa
          path: "build/ios/archive/Runner.xcarchive/Products/Applications/FlutterIpaExport.ipa"
          #path: "build/ios/ipa/ci_cd_demo.ipa"

  # Job 4 (Depends upon Job 3)
  distribute-ipa:
    runs-on: ubuntu-latest
    needs: build-ios
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Download ipa artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: "ci_cd_demo.ipa"
          path: ".github/artifacts/"

      - name: List Download Artifacts
        run: ls -la .github/artifacts/

      - name: Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: "1:296310144448:ios:d49519a2e3b5b43c9d5c25"

          # Content of service credentials file
          # Important: Repository `secrets` can only be accessed in the main workflow file
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }} # optional
          # Artifact to upload (.apk or .ipa)
          file: ".github/artifacts/FlutterIpaExport.ipa"
          # Distribution groups
          groups: "codknox-testers" # optional
          # Distribution testers
          releaseNotes: "Test the core features of the app v(1.0.${{ github.run_number }})" # optional
          # Flag that can included to print verbose log output.
          debug: true


